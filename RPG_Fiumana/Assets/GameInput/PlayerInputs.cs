//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""GameplayInput"",
            ""id"": ""6e2804b5-94ec-4414-8301-9317315aef74"",
            ""actions"": [
                {
                    ""name"": ""LeftButtonClick"",
                    ""type"": ""Button"",
                    ""id"": ""7d605bd4-402f-4ee0-9f14-01d18c728233"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateNewMap"",
                    ""type"": ""Button"",
                    ""id"": ""de2bf4a8-840c-4f3c-b3c0-0a9f2631100a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a3a298f-299d-4d33-b4fe-671c5a524212"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8856a29-f52e-49d0-832c-f9d28af03bc5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateNewMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayInput
        m_GameplayInput = asset.FindActionMap("GameplayInput", throwIfNotFound: true);
        m_GameplayInput_LeftButtonClick = m_GameplayInput.FindAction("LeftButtonClick", throwIfNotFound: true);
        m_GameplayInput_GenerateNewMap = m_GameplayInput.FindAction("GenerateNewMap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayInput
    private readonly InputActionMap m_GameplayInput;
    private List<IGameplayInputActions> m_GameplayInputActionsCallbackInterfaces = new List<IGameplayInputActions>();
    private readonly InputAction m_GameplayInput_LeftButtonClick;
    private readonly InputAction m_GameplayInput_GenerateNewMap;
    public struct GameplayInputActions
    {
        private @PlayerInputs m_Wrapper;
        public GameplayInputActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftButtonClick => m_Wrapper.m_GameplayInput_LeftButtonClick;
        public InputAction @GenerateNewMap => m_Wrapper.m_GameplayInput_GenerateNewMap;
        public InputActionMap Get() { return m_Wrapper.m_GameplayInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayInputActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Add(instance);
            @LeftButtonClick.started += instance.OnLeftButtonClick;
            @LeftButtonClick.performed += instance.OnLeftButtonClick;
            @LeftButtonClick.canceled += instance.OnLeftButtonClick;
            @GenerateNewMap.started += instance.OnGenerateNewMap;
            @GenerateNewMap.performed += instance.OnGenerateNewMap;
            @GenerateNewMap.canceled += instance.OnGenerateNewMap;
        }

        private void UnregisterCallbacks(IGameplayInputActions instance)
        {
            @LeftButtonClick.started -= instance.OnLeftButtonClick;
            @LeftButtonClick.performed -= instance.OnLeftButtonClick;
            @LeftButtonClick.canceled -= instance.OnLeftButtonClick;
            @GenerateNewMap.started -= instance.OnGenerateNewMap;
            @GenerateNewMap.performed -= instance.OnGenerateNewMap;
            @GenerateNewMap.canceled -= instance.OnGenerateNewMap;
        }

        public void RemoveCallbacks(IGameplayInputActions instance)
        {
            if (m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayInputActions @GameplayInput => new GameplayInputActions(this);
    public interface IGameplayInputActions
    {
        void OnLeftButtonClick(InputAction.CallbackContext context);
        void OnGenerateNewMap(InputAction.CallbackContext context);
    }
}
